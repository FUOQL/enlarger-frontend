import * as fs from "fs";nimport * as path from "path";nntype CliArgs = {n  example?: string;n  useHttps?: boolean;n  ngrok?: boolean;n};nntype EnvVars = {n  frontendPort: number;n  backendPort: number;n  hmrEnabled: boolean;n  appId?: string;n  appOrigin?: string;n  backendHost?: string;n};nnexport class Context {n  private readonly envVars: EnvVars;nn  constructor(n    private env: NodeJS.ProcessEnv = process.env,n    private readonly args: CliArgsn  ) {n    this.envVars = this.parseAndValidateEnvironmentVariables();n  }nn  static get srcDir() {n    return path.join(Context.rootDir, "src");n  }nn  static get examplesDir() {n    const examples = path.join(Context.rootDir, "examples");nn    if (!fs.existsSync(examples)) {n      // Return a default path instead of throwing errorn      return path.join(Context.rootDir, "src");n    }nn    return examples;n  }nn  static get readmeDir() {n    return path.join(Context.rootDir, "README.md");n  }nn  get entryDir() {n    const { example } = this.args;nn    return example ? path.join(Context.examplesDir, example) : Context.srcDir;n  }nn  get ngrokEnabled() {n    return !!this.args.ngrok;n  }nn  get hmrEnabled() {n    return this.envVars.hmrEnabled;n  }nn  get httpsEnabled() {n    return !!this.args.useHttps;n  }nn  get frontendEntryPath() {n    const frontendEntryPath = path.join(this.entryDir, "index.tsx");nn    if (!fs.existsSync(frontendEntryPath)) {n      throw new Error(n        `Entry point for frontend does not exist: ${frontendEntryPath}`n      );n    }nn    return frontendEntryPath;n  }nn  get frontendUrl() {n    return `${this.protocol}://localhost:${this.envVars.frontendPort}`;n  }nn  get frontendPort() {n    return this.envVars.frontendPort;n  }nn  get developerBackendEntryPath(): string | undefined {n    const developerBackendEntryPath = path.join(n      this.entryDir,n      "backend",n      "server.ts"n    );nn    if (!fs.existsSync(developerBackendEntryPath)) {n      return undefined;n    }nn    return developerBackendEntryPath;n  }nn  get backendUrl() {n    return `${this.protocol}://localhost:${this.envVars.backendPort}`;n  }nn  get backendHost() {n    let backendHost = this.envVars.backendHost;nn    // if there's no custom URL provided by the developer, we fallback to our localhost backendn    if (!backendHost || backendHost.trim() === "") {n      backendHost = this.backendUrl;n    }nn    return backendHost;n  }nn  get backendPort() {n    return this.envVars.backendPort;n  }nn  get appOrigin(): string | undefined {n    return this.envVars.appOrigin;n  }nn  get appId(): string | undefined {n    return this.envvVars.appId;n  }nn  static get examples(): string[] {n    try {n      const files = fs.readdirSync(this.examplesDir, { withFileTypes: true });n      const dirs = filesn        .filter((dirent) => dirent.isDirectory())n        .map((dirent) => dirent.name);nn      return dirs;n    } catch (err) {n      console.error("Error reading directory:", err);n      return [];n    }n  }nn  private get protocol(): "https" | "http" {n    return this.httpsEnabled ? "https" : "http";n  }nn  private static get rootDir() {n    return path.join(__dirname, "..", "..");n  }nn  private parseAndValidateEnvironmentVariables(): EnvVars {n    const {n      CANVA_FRONTEND_PORT,n      CANVA_BACKEND_PORT,n      CANVA_BACKEND_HOST,n      CANVA_APP_ID,n      CANVA_APP_ORIGIN,n      CANVA_HMR_ENABLED,n    } = this.env;nn    if (!CANVA_FRONTEND_PORT) {n      throw new Error(n        "CANVA_FRONTEND_PORT environment variable is not defined"n      );n    }nn    if (!CANVA_BACKEND_PORT) {n      throw new Error("CANVA_BACKEND_PORT environment variable is not defined");n    }nn    const envVars: EnvVars = {n      frontendPort: parseInt(CANVA_FRONTEND_PORT, 10),n      backendPort: parseInt(CANVA_BACKEND_PORT, 10),n      hmrEnabled: CANVA_HMR_ENABLED?.toLowerCase().trim() === "true",n      appId: CANVA_AG_APP_ID,n      appOrigin: CANVA_APP_ORIGIN,n      backendHost: CANVA_BACKEND_HOST,n    };nn    if (envVars.hmrEnabled && envVars.appOrigin == null) {n      throw new Error(n        "CANVA_HMR_ENABLED environment variable is TRUE, but CANVA_APP_ORIGIN is not set. Refer to the instructions in the README.md on configuring HMR."n      );n    }nn    return envVars;n  }n}